### CpG methylation - gene expression correlation analysis 

# make a file with CpG methylation data for the PA samples (phylloxera adults on Cab33 host, generation 0)

# Run an interactive bash session
srun -p highmem --mem=100g --time=00:30:00 --pty bash -l

# Load bedtools
module load bedtools/2.30.0 

# Define an output folder for filtered files
mkdir -p filtered_cov

# Process each sample individually and filter CpG sites with at least 4 reads
# Note: the deduplicated.bismark.cov files were generated by bismark and have CpG methylation data
for file in PA*_1_val_1_bismark_bt2_pe_dedup.deduplicated.bismark.cov; do
    awk '($5 + $6) >= 4' "$file" > "filtered_cov/$(basename "$file" .bismark.cov)_filtered.cov"
done

# Combine files so that you have total reads per CpG but filted based on the 4 or more reads in each sample
# Create a temporary directory for intermediate files
mkdir -p temp

# Process each sample individually to extract CpG sites and separate methylated/unmethylated reads
for file in filtered_cov/PA*_1_val_1_bismark_bt2_pe_dedup.deduplicated_filtered.cov; do
    awk '{print $1,$2,$3,$5,$6}' "$file" > "temp/$(basename "$file" .cov)_split.cov"
done

# Merge all files based on CpG sites (first three columns)
paste temp/*.cov | awk '
{
    key = $1"\t"$2"\t"$3  # Chromosome, Start, Stop as the unique key

    # Initialize methylated and unmethylated sums
    meth_sum = $4
    unmeth_sum = $5
    total_reads = $4 + $5  # Compute total for the first sample

    # Loop through each sample (every 5th and 6th column for methylated/unmethylated)
    for (i = 9; i <= NF; i += 5) {
        meth_sum += $(i)
        unmeth_sum += $(i+1)
        total_reads += $(i) + $(i+1)
    }

    # Ensure the CpG site is present in all 4 samples (4 sets of columns)
    if (NF / 5 == 4) {
        print key, meth_sum, unmeth_sum
    }
}' > combined_filtered.cov

# Sort the file 
sort -k1,1 -k2,2n combined_filtered.bed > combined_filtered_sorted.bed


# Make a bed file with gene coordinates and annotation information using the GFF3 file 
awk '
$3 == "gene" {
    match($9, /ID=([^;]+)/, id);  # Extract the gene ID
    if (id[1] != "") {
        print $1 "\t" $4-1 "\t" $5 "\t" id[1];  # Print as BED format (0-based start)
    }
}' OGS3.2_20180216.gff3 > gene_annotations.bed

# Sort the gene annotations file
sort -k1,1 -k2,2n gene_annotations.bed > gene_annotations_sorted.bed


# Annotate the CpG sites using bedtools intersect
bedtools intersect -a combined_filtered_sorted.bed -b gene_annotations.bed -wa -wb > CpG_PA_annotated_final.bed

wc -l CpG_PA_annotated_final.bed # 3,577,002







## Run statistical analyses and make plots in R 

# Activate R in command line/terminal
R 

# Load R libraries
library(dplyr)
library(readr)
library(readxl)
library(tidyverse)
library(limma)
library(edgeR)
library(statmod);library(data.table);library(gplots)

# First, use edgeR to write a data frame that has mean absolute value of log2-fold-change
# This quantifies the average level of gene expression plasticity across all host-by-host comparisons

# read in count data from STAR alignment
STAR_counts <- read_table("stargenecount.txt")
count_data_merged <- as.data.frame(STAR_counts)

rownames(count_data_merged)<-count_data_merged$gene_id
rownames(count_data_merged)

## remove first row to get count data
count_data_merged<- count_data_merged[-c(1)]

# remove G0 samples
count_data_merged<- count_data_merged[-c(13:16)]

# check library sizes
library.sizes <- colSums(count_data_merged)

library.sizes
range(library.sizes)

#format object for edgeR analysis
targetdata<-data.frame(FileName=colnames(count_data_merged),Group=c(rep("G1103",4), rep("G101_14",4), rep("G99R",4), rep("G1_cab33",4),rep("GS04",4)))
targetdata$Gp2<-factor(targetdata$Group)
targetdata$Gp2<-as.numeric(targetdata$Gp2)
targetdata


# create edgeR DGEList object
x<-DGEList(counts=as.matrix(count_data_merged),lib.size=library.sizes,group=targetdata$Group)

# check data
class(x)
dim(x)
colnames(x)

samplenames <- substring(colnames(x), 1, nchar(colnames(x)))
samplenames
colnames(x) <- samplenames
colnames(x)
rownames(x)

# grouping is based on the order of samples in the initial count data matrix
group <- as.factor(c( "G1103", "G1103", "G1103", "G1103","G101_14", "G101_14", "G101_14", "G101_14",  "G99R", "G99R", "G99R", "G99R","G1_cab33", "G1_cab33", "G1_cab33", "G1_cab33", "GS04", "GS04","GS04", "GS04"))
x$samples$group <- group
x$samples


## gene filtering based on counts
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
cpm <- cpm.DGEList(x)
summary(lcpm)


# remove genes with insufficient count data (too lowly expressed/ not expressed)
?filterByExpr

keep.exprs <- filterByExpr(x, group=group) 
x <- x[keep.exprs,, keep.lib.sizes=FALSE] 
dim(x) 


# Perfrom DEG analysis
design <- model.matrix(~0+group)
colnames(design) <- gsub("group", "", colnames(design))
design

# make contrasts
#compare all hosts
contr.matrix <- makeContrasts(
  G1_cab33vsG101_14 = G1_cab33 - G101_14,
  G1_cab33vsG99R = G1_cab33 - G99R,
  G1_cab33vsG1103 = G1_cab33 - G1103,
  G1_cab33vsGS04 = G1_cab33 - GS04,
  G101_14vsG99R = G101_14 - G99R,
  G101_14vsG1103 = G101_14 - G1103,
  G101_14vsGS04 = G101_14 - GS04,
  G99RvsG1103 = G99R - G1103,
  G99RvsGS04 = G99R - GS04,
  G1103vsGS04 = G1103 - GS04,
  levels = colnames(design)
)

contr.matrix

# run voom model fitting
v <- voom(x, design, plot=TRUE)
v
vfit <- lmFit(v, design) 
vfit <- contrasts.fit(vfit, contrasts=contr.matrix) 
efit <- eBayes(vfit)
plotSA(efit)

# make a table of to show number of DEGs
summary(decideTests(efit)) 


# add a 1.5-fold-change filter
tfit <- treat(vfit, fc=1.5) 
dt <- decideTests(tfit) 
summary(dt)


# Convert the 'tfit' object to a data frame and retain the gene IDs
tfit_df <- as.data.frame(tfit)

# Add the gene IDs from 'tfit' as a column
tfit_df$gene_id <- rownames(tfit)

# Reorder columns if needed, to place 'gene_id' as the first column
tfit_df <- tfit_df[, c("gene_id", setdiff(names(tfit_df), "gene_id"))]

# Calculate the average of absolute values for columns 2 through 11
tfit_df$avg_abs_logFC <- rowMeans(abs(tfit_df[, 2:11]), na.rm = TRUE)

writexl::write_xlsx(tfit_df, "tfit_abs_log2FC_01222025.xlsx")






## Now perform correlational analysis between gene expression plasticity and DNA methylation
# Read in CpG methylation data
CpG_meth <- read.table("CpG_PA_annotated_final.bed", header = FALSE)


# Rename columns for clarity
colnames(CpG_meth) <- c("Scaffold", "Start", "End", "Methylated", "Unmethylated", 
                        "Scaffold2", "Gene_Start", "Gene_End", "Gene_ID")

library(dplyr)

# Summarize methylation data by Gene_ID
methylation_summary <- CpG_meth %>%
  group_by(Gene_ID) %>%
  summarise(Total_Methylated = sum(Methylated, na.rm = TRUE),
            Total_Unmethylated = sum(Unmethylated, na.rm = TRUE),
            Total_Coverage = Total_Methylated + Total_Unmethylated)

# View results
print(methylation_summary)
# 22,720

# add column for meth reads / total reads (CpG methylation percentage per gene)
methylation_summary <- methylation_summary %>%
  mutate(Methylation_Proportion = Total_Methylated / Total_Coverage)

# rename gene ID column 
colnames(methylation_summary)[1] ="fasta3.1ID"


# read in RNA seq count data
log2FC_df <- read_xlsx("tfit_abs_log2FC_01222025.xlsx")

# rename gene ID col to fasta3.1ID
colnames(log2FC_df)[1] ="fasta3.1ID"

#write df with only fast3.1ID and log2FC 
log2FC_df<- log2FC_df[c(1,12)]

# make new df by merging the log2FC and avg CpG methylation by geneID 
merged_df <- merge(log2FC_df, methylation_summary, by = "fasta3.1ID")

##  12,368 genes
## logFC df = 12,876 genes
## CpG methylation df = 22,720 genes

# Run Spearman rank correlation test

# Step 2: Calculate the Spearman correlation coefficient
spearman_test <- cor.test(merged_df$avg_abs_logFC, merged_df$Methylation_Proportion, method = "spearman")

# Print Spearman correlation results
print(spearman_test)


# Perform linear regression analysis 
lm_fit <- lm(Methylation_Proportion ~ avg_abs_logFC, data = merged_df)
summary(lm_fit)  # View regression summary



# Step 4: Plot the data with a regression line
# Load ggplot2 package
library(ggplot2)

# Create the scatter plot with LOESS line
ggplot(merged_df, aes(x = Methylation_Proportion, y = avg_abs_logFC)) +
  geom_point(color = "black") +  # Plot the data points
  geom_smooth(method = "loess", se = FALSE, color = "blue") +  # LOESS smoother for non-linear fitting
  labs(title = "Gene Methylation vs Gene Expression Plasticity", 
       x = "% CpG methylation", 
       y = "avg. |log2FC| (transcriptional plasticity)") +
  scale_y_continuous(limits = c(0, NA), expand = c(0, 0)) +  # Set y-axis to start at 0
  theme_minimal()


### Making violin plots
# Create quantile-based bins
merged_df$expression_group <- cut(
  merged_df$avg_abs_logFC,
  breaks = quantile(merged_df$avg_abs_logFC, probs = seq(0, 1, by = 0.25), na.rm = TRUE),
  labels = c("Q1 (Low)", "Q2", "Q3", "Q4 (High)"),
  include.lowest = TRUE
)


# Create the violin plot with quantile-based grouping
ggplot(merged_df, aes(x = expression_group, y = Methylation_Proportion)) +
  geom_violin(fill = "lightblue") +
  geom_jitter(width = 0.2, alpha = 0.3) +  # Optional: show individual data points
  labs(#title = "Methylation Levels by Gene Expression Quartiles",
    x = "log2FC quartile (transcriptional plasticity)",
    y = "average CpG methylation") +
  theme_minimal()

# scaled violins
ggplot(merged_df, aes(x = expression_group, y = Methylation_Proportion)) +
  geom_violin(fill = "lightblue", scale = "width") +  # Change scale to "area"
  #geom_jitter(width = 0.2, alpha = 0.3) +
  labs(title = "Methylation Levels by Gene Expression Quartiles",
       x = "Gene Expression Quartile",
       y = "Average Percent Methylation per CpG") +
  theme_minimal()


# using different color scheme
library(RColorBrewer)

ggplot(merged_df, aes(x = expression_group, y = Methylation_Proportion, fill = expression_group)) +
  geom_violin(scale = "width") +  # Scale based on width
  scale_fill_brewer(palette = "BuGn") +  # Apply RColorBrewer palette
  labs(title = "",
       x = "Gene Expression Plasticity Quartile",
       y = "CpG methylation ratio") +
  theme_minimal() + theme(legend.position = "none")



## run stats on the plasticity quartiles to see if significantly different
#Kruskal-Wallis (for overall differences)
kruskal.test(Methylation_Proportion ~ expression_group, data = merged_df)

#Kruskal-Wallis chi-squared = 3617.3, df = 3, p-value < 2.2e-16


#  pairwise Wilcoxon rank-sum tests
pairwise.wilcox.test(merged_df$Methylation_Proportion, merged_df$expression_group, p.adjust.method = "BH")

## Results: pairwise comparisons using Wilcoxon rank sum test with continuity correction 
#.           Q1 (Low) Q2     Q3    
#  Q2        <2e-16   -      -     
#  Q3        <2e-16   <2e-16 -     
#  Q4 (High) <2e-16   <2e-16 <2e-16
#P value adjustment method: BH 
